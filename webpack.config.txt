const path = require('path');
const { PurgeCSSPlugin } = require('purgecss-webpack-plugin');
const glob = require('glob');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
// const ESLintPlugin = require('eslint-webpack-plugin');


module.exports = (env, argv) => {
    const isProduction = argv.mode === 'production';

    const plugins = [
        new CleanWebpackPlugin(),
        new HtmlWebpackPlugin({
            template: './src/index.html',
        }),
        new MiniCssExtractPlugin({
            filename: '[name].[contenthash].css',
            chunkFilename: '[id].[contenthash].css',
        }),
        new PurgeCSSPlugin({
            paths: glob.sync(`${path.join(__dirname, 'src')}/**/*.{html,js,jsx,scss,css}`, { nodir: true }),
            safelist: {
                standard: [/^custom-class-/],
                deep: [/tooltip/, /popover/],
            },
        }),
        new TerserPlugin({
            terserOptions: {
                compress: {
                    drop_console: true, // Видаляє console.log
                    drop_debugger: true, // Видаляє debugger
                },
                output: {
                    comments: false, // Видаляє коментарі
                },
            },
        }),
        // new ESLintPlugin({
        //     extensions: ['js', 'jsx'], // Перевіряє тільки JS/JSX файли
        //     emitWarning: !isProduction, // Попередження замість помилок у режимі розробки
        // }),
    ];

    if (!isProduction) {
        plugins.push(new BundleAnalyzerPlugin());
    }

    return {
        entry: './src/index.jsx',
        output: {
            filename: '[name].[contenthash].js',
            chunkFilename: '[name].[contenthash].js',
            path: path.resolve(__dirname, 'dist'),
            publicPath: '/',
        },
        optimization: {
            splitChunks: {
                chunks: 'all',
                name: false,
            },
            minimize: true,
            minimizer: [
                new TerserPlugin({
                    terserOptions: {
                        compress: {
                            drop_console: true,
                        },
                    },
                }),
                new CssMinimizerPlugin(),
            ],
        },
        module: {
            rules: [
                {
                    test: /\.(js|jsx)$/,
                    exclude: /node_modules/,
                    use: {
                        loader: 'babel-loader',
                        options: {
                            cacheDirectory: true,
                        },
                    },
                },
                {
                    test: /\.css$/i, // Для всіх .css файлів
                    use: [
                        isProduction ? MiniCssExtractPlugin.loader : 'style-loader', // Витягує CSS в окремі файли у production
                        'css-loader', // Обробляє CSS
                    ],
                },
                {
                    test: /\.s[ac]ss$/i,
                    use: [
                        isProduction ? MiniCssExtractPlugin.loader : 'style-loader', // Витягує CSS в окремі файли у production
                        'css-loader', // Завантажує CSS
                        {
                            loader: 'sass-loader',
                            options: {
                                implementation: require('sass'), // Використання нового API Dart Sass
                            },
                        },
                    ],
                },                
                {
                    test: /\.(gif|png|jpe?g|svg|webp)$/i,
                    type: 'asset/resource',
                    generator: {
                        filename: 'images/[name].[ext]',
                    },
                },
                
            ],
        },
        resolve: {
            extensions: ['.js', '.jsx'],
        },
        plugins: plugins,
        devServer: {
            historyApiFallback: true,
            open: true,
            hot: true,
            port: 8080,
            proxy: {
                '/api': {
                    // target: 'https://dobrovershnyk.online/api',
                    target: 'https://charity.team-911.com.ua/api',
                    secure: false,
                    changeOrigin: true,
                    pathRewrite: { '^/api': '' },
                },
            },
        },
    };
};
